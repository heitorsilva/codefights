require_relative './sudoku2'

describe 'sudoku2' do
  it 'should return true when the grid is valid' do
    grid = [['.', '.', '.', '1', '4', '.', '.', '2', '.'],
            ['.', '.', '6', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '1', '.', '.', '.', '.', '.', '.'],
            ['.', '6', '7', '.', '.', '.', '.', '.', '9'],
            ['.', '.', '.', '.', '.', '.', '8', '1', '.'],
            ['.', '3', '.', '.', '.', '.', '.', '.', '6'],
            ['.', '.', '.', '.', '.', '7', '.', '.', '.'],
            ['.', '.', '.', '5', '.', '.', '.', '7', '.']]

    expect(sudoku2(grid)).to eq(true)
  end

  it 'should return false when a number repeats in a line' do
    grid = [['.', '.', '.', '.', '2', '.', '.', '9', '.'],
            ['.', '.', '.', '.', '6', '.', '.', '.', '.'],
            ['7', '1', '.', '.', '7', '5', '.', '.', '.'],
            ['.', '7', '.', '.', '.', '.', '.', '.', '.'],
            ['.', '.', '.', '.', '8', '3', '.', '.', '.'],
            ['.', '.', '8', '.', '.', '7', '.', '6', '.'],
            ['.', '.', '.', '.', '.', '1', '.', '.', '.'],
            ['.', '5', '.', '2', '.', '.', '.', '.', '.'],
            ['.', '2', '.', '.', '3', '.', '.', '.', '.']]

    expect(sudoku2(grid)).to eq(false)
  end

  it 'should return false when a number repeats in a column' do
    grid = [[".",".","4",".",".",".","6","3","."],
            [".",".",".",".",".",".",".",".","."],
            ["5",".",".",".",".",".",".","9","."],
            [".",".",".","5","6",".",".",".","."],
            ["4",".","3",".",".",".",".",".","1"],
            [".",".",".","7",".",".",".",".","."],
            [".",".",".","5",".",".",".",".","."],
            [".",".",".",".",".",".",".",".","."],
            [".",".",".",".",".",".",".",".","."]]

    expect(sudoku2(grid)).to eq(false)
  end

  it 'should return false when a number appears twice in a sub-grid' do
    grid = [[".","4",".",".",".",".",".",".","."],
            [".",".","4",".",".",".",".",".","."],
            [".",".",".","1",".",".","7",".","."],
            [".",".",".",".",".",".",".",".","."],
            [".",".",".","3",".",".",".","6","."],
            [".",".",".",".",".","6",".","9","."],
            [".",".",".",".","1",".",".",".","."],
            [".",".",".",".",".",".","2",".","."],
            [".",".",".","8",".",".",".",".","."]]

    expect(sudoku2(grid)).to eq(false)
  end

  it 'should return false when the grid is empty or nil' do
    expect(sudoku2(nil)).to eq(false)
    expect(sudoku2([])).to eq(false)
  end
end
